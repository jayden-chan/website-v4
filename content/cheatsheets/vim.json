[
  {
    "title": "first test of typescript syntax highlighting engine",
    "body": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer sed mauris at odio condimentum hendrerit nec at ligula. Proin tincidunt feugiat molestie. Aenean mattis pharetra sem quis fringilla. Nulla tempus semper congue. Sed placerat odio tortor. Nam venenatis, dui in laoreet pellentesque, arcu risus lobortis urna, eleifend vehicula turpis eros non dui. Vestibulum tincidunt massa dapibus mi commodo luctus. Donec commodo urna id ligula faucibus, ac accumsan lorem ultricies. Pellentesque tincidunt suscipit porta. Nunc ultrices, nunc ut luctus lacinia, purus nulla vehicula erat, at gravida purus arcu nec enim. Nunc rhoncus tempus purus, vel rutrum nisi sodales ut. Mauris sollicitudin iaculis est. Nunc sit amet scelerisque diam. Nunc et ultricies elit, id euismod urna. ",
    "code": "const filteredItems = vim.filter(item =&gt; {\n  const st = value;\n  const matched =\n    item.title.includes(st) ||\n    // @ts-ignore\n    (item.body &amp;&amp; item.body.includes(st)) ||\n    item.code.includes(st) ||\n    item.tags.some(tag =&gt; tag.includes(st));\n\n  return matched;\n});",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "second test of typescript syntax highlighting engine",
    "body": null,
    "code": "async function render(page: Page, pathStack: string[]): Promise<void> {\n  return new Promise((resolve, reject) => {\n    readFile(page.template, {encoding: 'UTF-8'}, (err, template) => {\n      if (err) {\n        reject(err);\n      }\n\n      const html = ReactDOMServer.renderToString(page.component);\n      const outputPath = [...pathStack, page.relativePath].join('');\n\n      mkdir(outputPath, {recursive: true}, err => {\n        if (err) {\n          reject(err);\n        }\n\n        const toReplace = [\n          {\n            key: 'content',\n            content: html,\n          },\n          {\n            key: 'title',\n            content: page.title,\n          },\n        ];\n\n        if (page.reactsrc) {\n          toReplace.push({\n            key: 'reactsrc',\n            content: page.reactsrc,\n          });\n        }\n\n        writeFile(\n          `${outputPath}index.html`,\n          templateReplace(template, toReplace),\n          async err => {\n            if (err) {\n              reject(err);\n            }\n\n            const wg: Promise<void>[] = [];\n            page.subpages.forEach(subpage => {\n              wg.push(render(subpage, [...pathStack, page.relativePath]));\n            });\n\n            await Promise.all(wg);\n            resolve();\n          },\n        );\n      });\n    });\n  });\n}",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "third test of typescript syntax highlighting engine",
    "body": null,
    "code": "import {ReactElement} from 'react';\nimport ReactDOMServer from 'react-dom/server';\n\nimport {readFile, writeFile, copyFile, mkdir} from 'fs';\nimport {sync as rmdir} from 'rimraf';\n\nimport {config} from '@fortawesome/fontawesome-svg-core';\nconfig.autoAddCss = false;\n\nimport {throwIfErr, dirStat, templateReplace} from './utils';\nimport {SITE_LAYOUT} from './layout';\nimport './styles/index.scss';\n\nconst OUTPUT_DIR = './build';\n\nfunction log(...args: any[]): void {\n  if (args.length === 0) {\n    console.log();\n  }\n  args.forEach(a =&gt; console.log(`[generator]: ${a}`));\n}\n\ntype Page = {\n  relativePath: string;\n  title: string;\n  template: string;\n  component: ReactElement;\n  reactsrc?: string;\n  subpages: Page[];\n};\n\n/**\n * Recursively render the pages defined in the site layout into\n * static HTML\n */\nasync function render(page: Page, pathStack: string[]): Promise&lt;void&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    readFile(page.template, {encoding: 'UTF-8'}, (err, template) =&gt; {\n      if (err) {\n        reject(err);\n      }\n\n      const html = ReactDOMServer.renderToString(page.component);\n      const outputPath = [...pathStack, page.relativePath].join('');\n\n      mkdir(outputPath, {recursive: true}, err =&gt; {\n        if (err) {\n          reject(err);\n        }\n\n        const toReplace = [\n          {\n            key: 'content',\n            content: html,\n          },\n          {\n            key: 'title',\n            content: page.title,\n          },\n        ];\n\n        if (page.reactsrc) {\n          toReplace.push({\n            key: 'reactsrc',\n            content: page.reactsrc,\n          });\n        }\n\n        writeFile(\n          `${outputPath}index.html`,\n          templateReplace(template, toReplace),\n          async err =&gt; {\n            if (err) {\n              reject(err);\n            }\n\n            const wg: Promise&lt;void&gt;[] = [];\n            page.subpages.forEach(subpage =&gt; {\n              wg.push(render(subpage, [...pathStack, page.relativePath]));\n            });\n\n            await Promise.all(wg);\n            resolve();\n          },\n        );\n      });\n    });\n  });\n}\n\nexport default async function main() {\n  console.time('Time');\n  log('Building website');\n  log('Clearing old files');\n\n  rmdir(OUTPUT_DIR);\n\n  log('Rendering');\n  await mkdir(OUTPUT_DIR, err =&gt; throwIfErr(err));\n  await mkdir(`${OUTPUT_DIR}/js`, err =&gt; throwIfErr(err));\n\n  const renderPromise = render(SITE_LAYOUT, [OUTPUT_DIR]);\n\n  copyFile('dist/generator.css', 'build/styles.css', err =&gt; throwIfErr(err));\n  copyFile('dist/cheat.js', 'build/js/cheat.js', err =&gt; throwIfErr(err));\n  copyFile('dist/vim.js', 'build/js/vim.js', err =&gt; throwIfErr(err));\n  copyFile('templates/404.html', 'build/404.html', err =&gt; throwIfErr(err));\n\n  await renderPromise;\n\n  log('Finished.\\n');\n  console.timeEnd('Time');\n\n  log();\n  dirStat(OUTPUT_DIR);\n  log();\n}\n\nmain();",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "retain all lines matching pattern",
    "body": null,
    "code": ":v/pattern/d",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "delete all lines matching pattern",
    "body": null,
    "code": ":g/pattern/d",
    "tags": ["vim", "command", "pattern"]
  }
]
