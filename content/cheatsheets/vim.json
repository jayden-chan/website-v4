[
  {
    "title": "retain all lines matching pattern",
    "body": "tthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddthis is great for removing massive amounts of text hehe xddhis is great for removing massive amounts of text hehe xdd",
    "code": "const filteredItems = vim.filter(item =&gt; {\n  const st = value;\n  const matched =\n    item.title.includes(st) ||\n    // @ts-ignore\n    (item.body &amp;&amp; item.body.includes(st)) ||\n    item.code.includes(st) ||\n    item.tags.some(tag =&gt; tag.includes(st));\n\n  return matched;\n});",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "second test of the typescript syntax highlighting engine",
    "body": null,
    "code": "async function render(page: Page, pathStack: string[]): Promise&lt;void&gt; {\n  return new Promise((resolve, reject) =&gt; {\n    readFile(page.template, {encoding: 'UTF-8'}, (err, template) =&gt; {\n      if (err) {\n        reject(err);\n      }\n\n      const html = ReactDOMServer.renderToString(page.component);\n      const outputPath = [...pathStack, page.relativePath].join('');\n\n      mkdir(outputPath, {recursive: true}, err =&gt; {\n        if (err) {\n          reject(err);\n        }\n\n        const toReplace = [\n          {\n            key: 'content',\n            content: html,\n          },\n          {\n            key: 'title',\n            content: page.title,\n          },\n        ];\n\n        if (page.reactsrc) {\n          toReplace.push({\n            key: 'reactsrc',\n            content: page.reactsrc,\n          });\n        }\n\n        writeFile(\n          `${outputPath}index.html`,\n          templateReplace(template, toReplace),\n          async err =&gt; {\n            if (err) {\n              reject(err);\n            }\n\n            const wg: Promise&lt;void&gt;[] = [];\n            page.subpages.forEach(subpage =&gt; {\n              wg.push(render(subpage, [...pathStack, page.relativePath]));\n            });\n\n            await Promise.all(wg);\n            resolve();\n          },\n        );\n      });\n    });\n  });\n}",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "retain all lines matching pattern",
    "body": null,
    "code": ":v/pattern/d",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "retain all lines matching pattern",
    "body": null,
    "code": ":v/pattern/d",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "retain all lines matching pattern",
    "body": null,
    "code": ":v/pattern/d",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "retain all lines matching pattern",
    "body": null,
    "code": ":v/pattern/d",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "retain all lines matching pattern",
    "body": null,
    "code": ":v/pattern/d",
    "tags": ["vim", "command", "pattern"]
  },
  {
    "title": "delete all lines matching pattern",
    "body": null,
    "code": ":g/pattern/d",
    "tags": ["vim", "command", "pattern"]
  }
]
